
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  domain: 'domain',
  isActive: 'isActive',
  plan: 'plan',
  maxMaklers: 'maxMaklers',
  maxLeads: 'maxLeads',
  dataRegion: 'dataRegion',
  gdprContact: 'gdprContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.MaklerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  phone: 'phone',
  website: 'website',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  logo: 'logo',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  maklerId: 'maklerId',
  tenantId: 'tenantId',
  name: 'name',
  description: 'description',
  status: 'status',
  budget: 'budget',
  spent: 'spent',
  platform: 'platform',
  targeting: 'targeting',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  impressions: 'impressions',
  clicks: 'clicks',
  leads: 'leads',
  conversions: 'conversions',
  ctr: 'ctr',
  cpl: 'cpl',
  conversionRate: 'conversionRate'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  maklerId: 'maklerId',
  tenantId: 'tenantId',
  campaignId: 'campaignId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  status: 'status',
  score: 'score',
  source: 'source',
  interest: 'interest',
  budget: 'budget',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastContact: 'lastContact',
  nextFollowUp: 'nextFollowUp',
  consentGiven: 'consentGiven',
  consentDate: 'consentDate',
  marketingConsent: 'marketingConsent'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  type: 'type',
  direction: 'direction',
  subject: 'subject',
  content: 'content',
  status: 'status',
  sentAt: 'sentAt',
  readAt: 'readAt'
};

exports.Prisma.LeadActivityScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.LandingPageScalarFieldEnum = {
  id: 'id',
  maklerId: 'maklerId',
  tenantId: 'tenantId',
  campaignId: 'campaignId',
  name: 'name',
  slug: 'slug',
  template: 'template',
  status: 'status',
  headline: 'headline',
  subheadline: 'subheadline',
  content: 'content',
  formFields: 'formFields',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  views: 'views',
  submissions: 'submissions',
  conversionRate: 'conversionRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  key: 'key',
  platform: 'platform',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  TENANT_ADMIN: 'TENANT_ADMIN',
  MAKLER: 'MAKLER',
  VIEWER: 'VIEWER'
};

exports.TenantPlan = exports.$Enums.TenantPlan = {
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.Platform = exports.$Enums.Platform = {
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  GOOGLE: 'GOOGLE',
  YOUTUBE: 'YOUTUBE',
  LINKEDIN: 'LINKEDIN',
  TIKTOK: 'TIKTOK'
};

exports.LeadStatus = exports.$Enums.LeadStatus = {
  NEU: 'NEU',
  KONTAKTIERT: 'KONTAKTIERT',
  QUALIFIZIERT: 'QUALIFIZIERT',
  WARM: 'WARM',
  HEISS: 'HEISS',
  TERMIN_VEREINBART: 'TERMIN_VEREINBART',
  PRAESENTATION_GEHALTEN: 'PRAESENTATION_GEHALTEN',
  ABGESCHLOSSEN: 'ABGESCHLOSSEN',
  VERLOREN: 'VERLOREN',
  NICHT_INTERESSIERT: 'NICHT_INTERESSIERT'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  WHATSAPP: 'WHATSAPP',
  SMS: 'SMS',
  LETTER: 'LETTER',
  VIDEO_CALL: 'VIDEO_CALL',
  IN_PERSON: 'IN_PERSON'
};

exports.CommunicationDirection = exports.$Enums.CommunicationDirection = {
  INBOUND: 'INBOUND',
  OUTBOUND: 'OUTBOUND'
};

exports.CommunicationStatus = exports.$Enums.CommunicationStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  REPLIED: 'REPLIED',
  FAILED: 'FAILED',
  BOUNCED: 'BOUNCED'
};

exports.LeadActivityType = exports.$Enums.LeadActivityType = {
  CREATED: 'CREATED',
  STATUS_CHANGED: 'STATUS_CHANGED',
  CONTACTED: 'CONTACTED',
  NOTE_ADDED: 'NOTE_ADDED',
  SCORE_UPDATED: 'SCORE_UPDATED',
  FOLLOW_UP_SCHEDULED: 'FOLLOW_UP_SCHEDULED',
  DOCUMENT_UPLOADED: 'DOCUMENT_UPLOADED',
  MEETING_SCHEDULED: 'MEETING_SCHEDULED',
  CONTRACT_SIGNED: 'CONTRACT_SIGNED'
};

exports.LandingPageTemplate = exports.$Enums.LandingPageTemplate = {
  ALTERSVORSORGE: 'ALTERSVORSORGE',
  BAUFINANZIERUNG: 'BAUFINANZIERUNG',
  KRANKENVERSICHERUNG: 'KRANKENVERSICHERUNG',
  LEBENSVERSICHERUNG: 'LEBENSVERSICHERUNG',
  BERUFSUNFAEHIGKEIT: 'BERUFSUNFAEHIGKEIT',
  RIESTER_RENTE: 'RIESTER_RENTE',
  RUERUP_RENTE: 'RUERUP_RENTE',
  CUSTOM: 'CUSTOM'
};

exports.LandingPageStatus = exports.$Enums.LandingPageStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tenant: 'Tenant',
  Session: 'Session',
  Makler: 'Makler',
  Campaign: 'Campaign',
  Lead: 'Lead',
  Communication: 'Communication',
  LeadActivity: 'LeadActivity',
  LandingPage: 'LandingPage',
  ApiKey: 'ApiKey',
  SystemSettings: 'SystemSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
